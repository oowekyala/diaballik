<UserControl x:Class="DiaballikWPF.View.GamePlay.TileView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:DiaballikWPF.View.GamePlay"
             xmlns:converters="clr-namespace:DiaballikWPF.Converters"
             xmlns:viewModel="clr-namespace:DiaballikWPF.ViewModel"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:qc="http://QuickConverter.CodePlex.com/"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300" d:DataContext="{d:DesignInstance viewModel:TileViewModel}">

    <UserControl.Resources>
        <qc:QuickConverter x:Key="BoolToVisibility" Convert="$P ? Visibility.Visible : Visibility.Hidden" />
        <qc:QuickConverter x:Key="ColorToBrush" Convert="new SolidColorBrush($P)" />

        <!-- Style for the base of the tile, always visible -->
        <Style x:Key="TileStyle" TargetType="Grid">
            <Setter Property="Background"
                    Value="{qc:Binding 'new SolidColorBrush(($P.X % 2 == $P.Y % 2) ? Colors.Black : Colors.White)', P={Binding Position, Mode=OneTime}}" />
        </Style>

        <Style x:Key="MarkStyle" TargetType="Ellipse">
            <Setter Property="Visibility"
                    Value="{qc:MultiBinding '$P0 ## !$P1 ? Visibility.Visible : Visibility.Hidden', P0={Binding IsMarked}, P1={Binding HasPiece}}" />
            <Setter Property="StrokeThickness" Value="5" />
            <Setter Property="Stroke"
                    Value="{Binding MarkingColor, Converter={StaticResource ColorToBrush}}" />
        </Style>


        <Style x:Key="PieceStyle" TargetType="Ellipse">
            <Setter Property="Stroke" Value="Black" />
            <Setter Property="StrokeThickness" Value="2" />
            <Setter Property="Fill"
                    Value="{qc:MultiBinding Converter='new SolidColorBrush($P0 ? ConvertUtil.DimColor($P1, 70) : $P1)', P0={Binding IsSelected}, P1={Binding PieceOwner.Color}}" />

            <Style.Triggers>
                <DataTrigger Binding="{qc:MultiBinding '$P0 ## $P1', P0={Binding IsMarked}, P1={Binding HasPiece}}"
                             Value="True">
                    <Setter Property="Stroke"
                            Value="{Binding MarkingColor, Converter={StaticResource ColorToBrush}}" />
                    <Setter Property="StrokeThickness" Value="5" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="BallStyle" TargetType="Ellipse">
            <Setter Property="Visibility"
                    Value="{Binding HasBall, Converter={StaticResource BoolToVisibility}}" />
            <Setter Property="Fill"
                    Value="{qc:Binding 'new SolidColorBrush(ConvertUtil.DimColor($P == null ? Colors.Transparent : $P.Color, 50))', P={Binding PieceOwner}}" />
            <Setter Property="Width"
                    Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Grid}}, Path=ActualWidth, Converter={qc:QuickConverter '$P * 60 / 100.0'}}" />
            <Setter Property="Height"
                    Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Grid}}, Path=ActualHeight, Converter={qc:QuickConverter '$P * 60 / 100.0'}}" />
        </Style>

    </UserControl.Resources>
    <Grid
        Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:TileView}}, Path=ActualHeight}"
        Style="{StaticResource TileStyle}">

        <!-- The button changes color when it's selected. -->
        <!-- It's disabled when the current player is the opponent. -->
        <!-- The ball is just an ellipse overlayed on the button's graphic, -->
        <!-- that is set to visible only when the tile carries the ball. -->
        <RadioButton
            Visibility="{Binding HasPiece, Converter={StaticResource BoolToVisibility}}"
            IsChecked="{Binding IsSelected, Mode=TwoWay}"
            IsEnabled="{Binding IsSelectable}"
            Command="{Binding SelectPieceCommand}"
            GroupName="Pieces">
            <RadioButton.Template>
                <ControlTemplate>
                    <Grid>
                        <Ellipse Style="{StaticResource PieceStyle}" />
                        <Ellipse Style="{StaticResource BallStyle}" />
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </RadioButton.Template>
        </RadioButton>
        <Ellipse Style="{StaticResource MarkStyle}" />
        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
    </Grid>
</UserControl>