<UserControl x:Class="DiaballikWPF.View.GamePlay.TileView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:DiaballikWPF.View.GamePlay"
             xmlns:converters="clr-namespace:DiaballikWPF.Converters"
             xmlns:viewModel="clr-namespace:DiaballikWPF.ViewModel"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:qc="http://QuickConverter.CodePlex.com/"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300" d:DataContext="{d:DesignInstance viewModel:TileViewModel}">

    <UserControl.Resources>
     

        <Style x:Key="MarkStyle" TargetType="Ellipse">
            <Setter Property="Visibility" Value="{Binding IsMarked, Converter={StaticResource BoolToVisibility}}" />
            <Setter Property="StrokeThickness" Value="0" />
            <Setter Property="Fill" Value="{Binding MarkingColor, Converter={StaticResource ColorToBrush}}" />
            <Setter Property="IsHitTestVisible" Value="False" /> <!-- Make it clickthrough -->
            <Setter Property="Width"
                    Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Grid}}, Path=ActualWidth, Converter={qc:QuickConverter '$P * 20 / 100.0'}}" />
            <Setter Property="Height" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />

        </Style>


        <Style x:Key="PieceStyle" TargetType="Ellipse">
            <Setter Property="Stroke" Value="Black" />
            <Setter Property="StrokeThickness" Value="2" />
            <Setter Property="Fill"
                    Value="{qc:MultiBinding Converter='new SolidColorBrush($P0 ? ConvertUtil.DimColor($P1, 70) : $P1)', P0={Binding IsSelected}, P1={Binding PieceOwner.Color}}" />
            <Setter Property="Width"
                    Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Grid}}, Path=ActualWidth, Converter={qc:QuickConverter '$P * 70 / 100.0'}}" />
            <Setter Property="Height" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />

        </Style>

        <Style x:Key="BallStyle" TargetType="Ellipse">
            <Setter Property="Visibility" Value="{Binding HasBall, Converter={StaticResource BoolToVisibility}}" />
            <Setter Property="Fill"
                    Value="{qc:Binding 'new SolidColorBrush(ConvertUtil.DimColor($P?.Color ?? Colors.Transparent, 50))', P={Binding PieceOwner}}" />
            <Setter Property="Width"
                    Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Grid}}, Path=ActualWidth, Converter={qc:QuickConverter '$P * 40 / 100.0'}}" />
            <Setter Property="Height" Value="{Binding ActualWidth, RelativeSource={RelativeSource Self}}" />
        </Style>

    </UserControl.Resources>
    <Grid
        Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:TileView}}, Path=ActualHeight}">

        <!-- The tile is covered with a button that activates only -->
        <!-- when a move can be accomplished. -->
        <Button
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Command="{Binding SelectMarkedMoveCommand}" />

        <!-- The button changes color when it's selected. -->
        <!-- It's disabled when the current player is the opponent. -->
        <!-- The ball is just an ellipse overlayed on the button's graphic, -->
        <!-- that is set to visible only when the tile carries the ball. -->
        <RadioButton
            Visibility="{Binding HasPiece, Converter={StaticResource BoolToVisibility}}"
            IsChecked="{Binding IsSelected, Mode=TwoWay}"
            IsEnabled="{Binding IsSelectable}"
            Command="{Binding SelectPieceCommand}"
            GroupName="Pieces">
            <RadioButton.Template>
                <ControlTemplate>
                    <Grid>
                        <Ellipse Style="{StaticResource PieceStyle}" />
                        <Ellipse Style="{StaticResource BallStyle}" />
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </RadioButton.Template>
        </RadioButton>
        <Ellipse Style="{StaticResource MarkStyle}" />
        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
    </Grid>
</UserControl>